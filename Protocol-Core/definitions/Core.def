java package io.tetrapod.protocol.core
java outdir "../src"
javascript out "../rsc/protocol/core.js"

// The core tetrapod service
service Core @version(1) @id(1)

struct Core
   const int   UNADDRESSED    = 0 // request is not addressed to a specific entity 
   const int   DIRECT         = 1 // request is for direct dispatch
   
   const byte  TYPE_TETRAPOD  = 1
   const byte  TYPE_SERVICE   = 2
   const byte  TYPE_ADMIN     = 3
   const byte  TYPE_CLIENT    = 4
   const byte  TYPE_ANONYMOUS = 5
   const byte  TYPE_WEBAPI    = 6
   
   const int DEFAULT_PUBLIC_PORT     = 9900
   const int DEFAULT_SERVICE_PORT    = 9901
   const int DEFAULT_CLUSTER_PORT    = 9902
   const int DEFAULT_HTTP_PORT       = 9904
   const int DEFAULT_HTTPS_PORT      = 9906
   
    
   const int   STATUS_STARTING     = 1  # bitmask
   const int   STATUS_PAUSED       = 2
   const int   STATUS_GONE         = 4
   const int   STATUS_BUSY         = 8
   const int   STATUS_OVERLOADED   = 16
   const int   STATUS_FAILED       = 32
   const int   STATUS_STOPPING     = 64

   # assigning values to errors should only be done for core errors
   error UNKNOWN              = 1 // catch all error
   error SERVICE_UNAVAILABLE  = 2 // No service exists to which to relay the request
   error TIMEOUT              = 3 // Request timed out without returning a response
   error SERIALIZATION        = 4 // Unable to deserialize the request
   error PROTOCOL_MISMATCH    = 5 // Protocol versions are not compatible
   error UNKNOWN_REQUEST      = 6 // Service exists and received request, but doesn't know how to handle it
   error CONNECTION_CLOSED    = 7 // Request's session was disconnected
   error INVALID_RIGHTS       = 8 // Caller does not have sufficient rights to call this Request     
   error INVALID_ENTITY       = 9 // An addressed entityId was invalid
   error RIGHTS_EXPIRED       = 10 // rights token has expired, need to login again     
   error SERVICE_OVERLOADED   = 11 // This service is over capacity, so the request was not performed
   error FLOOD                = 12 // client has sent too many requests recently

   const byte  ENVELOPE_HANDSHAKE      = 1 
   const byte  ENVELOPE_REQUEST        = 2
   const byte  ENVELOPE_RESPONSE       = 3
   const byte  ENVELOPE_MESSAGE        = 4
   const byte  ENVELOPE_BROADCAST      = 5
   const byte  ENVELOPE_PING           = 6
   const byte  ENVELOPE_PONG           = 7
   
################################# CORE WIRE #################################
 
public struct RequestHeader
   1: int 	requestId
   2: int 	fromId
   3: int 	toId
   4: byte 	fromType
   5: byte 	timeout
   6: int 	version
   7: int   contractId
   8: int 	structId
   
public struct ResponseHeader
   1: int requestId 
   2: int contractId
   3: int structId
   
public struct MessageHeader
   1: int fromId
   2: int topicId       
   3: int toId
   4: int contractId
   5: int structId
   
################################ STRUCTURES ###################

// allows an empty request to be called from admin app's service menu
internal struct ServiceCommand
   1: string name
   2: string icon
   3: int contractId
   4: int structId

public struct ServerAddress 
   1: string host
   2: int port

################################# REQUESTS ####################

internal request Pause

internal request Unpause

internal request Shutdown

internal request Restart
   1: string restartNonce
   2: boolean restartPaused 

internal request ServiceStatsSubscribe
internal request ServiceStatsUnsubscribe

internal request ServiceDetails
internal response ServiceDetails
   1: string iconURL
   3: string metadata
   2: ServiceCommand[] commands
    
internal request ServiceLogs
   1: long logId
   2: byte level
   3: int maxItems

internal response ServiceLogs
   1: long lastLogId 
   2: ServiceLogEntry<list> items
   
   error NOT_CONFIGURED
 
################################# MESSAGES #################################

internal message ServiceStats.ServiceStats
   1: int entityId
   2: int rps        // the requests per second serviced
   3: int mps        // messages sent per second
   4: long latency   // average time to process each request
   5: long counter   // service-specific counter value
   6: byte memory    // 0..100 the percentage of memory in use
   7: double load    // system load average
   8: int disk       // free disks space on working dir, in megabytes
   9: int threads    // number of active threads
    
################################# STRUCTURES #################################

internal struct Subscriber
   1: int entityId  
   2: int counter  

internal struct WebRoute
   1: string path
   2: int structId
   3: int contractId

internal struct TypeDescriptor
   1: byte type
   2: int contractId
   3: int structId
   const byte T_BOOLEAN  = 1
   const byte T_BYTE     = 2
   const byte T_INT      = 3
   const byte T_LONG     = 4
   const byte T_DOUBLE   = 5
   const byte T_STRING   = 6
   const byte T_STRUCT   = 7
   const byte T_BOOLEAN_LIST  = 8
   const byte T_BYTE_LIST     = 9
   const byte T_INT_LIST      = 10
   const byte T_LONG_LIST     = 11
   const byte T_DOUBLE_LIST   = 12
   const byte T_STRING_LIST   = 13
   const byte T_STRUCT_LIST   = 14
   
internal struct StructDescription
   1: TypeDescriptor[] types
   2: string[] tagWebNames
   
internal struct ServiceLogEntry
   1: string msg
   2: byte level 
   3: long timestamp
   4: string thread
   5: string logger
   
   const byte LEVEL_ALL     = 0
   const byte LEVEL_TRACE   = 10
   const byte LEVEL_DEBUG   = 20
   const byte LEVEL_INFO    = 30
   const byte LEVEL_WARN    = 40
   const byte LEVEL_ERROR   = 50
   const byte LEVEL_OFF     = 100
