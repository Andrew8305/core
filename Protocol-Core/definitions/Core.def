java package io.tetrapod.protocol.core
java outdir "../src"
javascript out "../../Tetrapod-Web/webContent/protocol/core.js"
javascript altOut "core.js"

// The core tetrapod service
service Core @version(1) @id(1) @sync

struct Core
   const int   UNADDRESSED    = 0 // request is not addressed to a specific entity 
   const int   DIRECT         = 1 // request is for direct dispatch
   
   const byte  TYPE_TETRAPOD  = 1
   const byte  TYPE_SERVICE   = 2
   const byte  TYPE_ADMIN     = 3 // deprecated
   const byte  TYPE_CLIENT    = 4
   const byte  TYPE_ANONYMOUS = 5
   const byte  TYPE_WEBAPI    = 6
   
   const int DEFAULT_PUBLIC_PORT     = 9900
   const int DEFAULT_SERVICE_PORT    = 9901
   const int DEFAULT_CLUSTER_PORT    = 9902
   const int DEFAULT_HTTP_PORT       = 9904
   const int DEFAULT_HTTPS_PORT      = 9906
   const int DEFAULT_DIRECT_PORT     = 9800
   
    
   const int   STATUS_STARTING     = 1  # bitmask
   const int   STATUS_PAUSED       = 2
   const int   STATUS_GONE         = 4
   const int   STATUS_BUSY         = 8
   const int   STATUS_OVERLOADED   = 16
   const int   STATUS_FAILED       = 32
   const int   STATUS_STOPPING     = 64
   const int   STATUS_PASSIVE      = 128
   const int   STATUS_ERRORS       = 256
   const int   STATUS_WARNINGS     = 512

   # assigning values to errors should only be done for core errors
   error UNKNOWN              = 1  // catch all error
   error SERVICE_UNAVAILABLE  = 2  // No service exists to which to relay the request
   error TIMEOUT              = 3  // Request timed out without returning a response
   error SERIALIZATION        = 4  // Unable to deserialize the request
   error PROTOCOL_MISMATCH    = 5  // Protocol versions are not compatible
   error UNKNOWN_REQUEST      = 6  // Service exists and received request, but doesn't know how to handle it
   error CONNECTION_CLOSED    = 7  // Request's session was disconnected
   error INVALID_RIGHTS       = 8  // Caller does not have sufficient rights to call this Request     
   error INVALID_ENTITY       = 9  // An addressed entityId was invalid
   error RIGHTS_EXPIRED       = 10 // rights token has expired, need to login again     
   error SERVICE_OVERLOADED   = 11 // This service is over capacity, so the request was not performed
   error FLOOD                = 12 // client has sent too many requests recently
   error INVALID_TOKEN        = 13 // for any sort of invalid token
   error UNSUPPORTED          = 14 // request is currently unsupported
   error INVALID_DATA         = 15 // for any sort of invalid data 
   error SECURITY             = 16 // for any sort of generic security violation 

   const byte  ENVELOPE_HANDSHAKE      = 1 
   const byte  ENVELOPE_REQUEST        = 2
   const byte  ENVELOPE_RESPONSE       = 3
   const byte  ENVELOPE_MESSAGE        = 4
   const byte  ENVELOPE_BROADCAST      = 5
   const byte  ENVELOPE_PING           = 6
   const byte  ENVELOPE_PONG           = 7
   
################################# CORE WIRE #################################
 
public struct RequestHeader
   1: int 	requestId
   2: int 	fromParentId
   3: int   fromChildId  
   4: int 	toId
   5: byte 	fromType
   6: byte 	timeout
   7: int 	version
   8: int   contractId
   9: int 	structId
  10: long  contextId
   
public struct ResponseHeader
   1: int requestId 
   2: int contractId
   3: int structId
   4: long contextId
   
public struct MessageHeader
   1: int fromId
   2: int topicId
   3: int toParentId
   4: int toChildId
   5: int contractId
   6: int structId
   7: byte flags    
   8: long contextId    
   
   const byte FLAGS_ALTERNATE = 1

public struct CommsLogFileHeader
   1: StructDescription<list> structs
   2: string serviceName
   3: int entityId
   4: string build
   5: string host

public struct CommsLogHeader
   1: long  timestamp
   2: LogHeaderType type 
   3: boolean sending // true of sending, false if received
   4: SessionType sesType
   5: int sessionId   
      
   enum int LogHeaderType.REQUEST      = 1
   enum int LogHeaderType.RESPONSE     = 2
   enum int LogHeaderType.MESSAGE      = 3
   enum int LogHeaderType.EVENT        = 4

   enum int SessionType.UNKNOWN      = 0
   enum int SessionType.WIRE         = 1
   enum int SessionType.WEB          = 2
   enum int SessionType.NONE         = 3

      
public struct MissingStructDef
      
################################ STRUCTURES ###################

// allows an empty or one-string-arg-called-data request to be called from admin app's service menu
internal struct ServiceCommand
   1: string name
   2: string icon
   3: int contractId
   4: int structId
   5: boolean hasArgument

public struct ServerAddress 
   1: string host
   2: int port

public struct Admin
   1: int accountId
   2: string email @sensitive
   3: string hash @sensitive
   4: long rights      
   5: long[] loginAttempts 

   const int MAX_LOGIN_ATTEMPTS    = 5
   
   const int RIGHTS_CLUSTER_READ   = 1
   const int RIGHTS_CLUSTER_WRITE  = 2
   const int RIGHTS_USER_READ      = 4
   const int RIGHTS_USER_WRITE     = 8
   const int RIGHTS_RESERVED_1     = 16
   const int RIGHTS_RESERVED_2     = 32
   const int RIGHTS_RESERVED_3     = 64
   const int RIGHTS_RESERVED_4     = 128   
   const int RIGHTS_APP_SET_1      = 256  
   const int RIGHTS_APP_SET_2      = 512
   const int RIGHTS_APP_SET_3      = 1024
   const int RIGHTS_APP_SET_4      = 2048
################################# REQUESTS ####################

admin request Pause @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive

admin request Unpause @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive

admin request Rebalance @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive
   
admin request ReleaseExcess @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive

admin request Purge @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive

internal request InternalShutdown 

admin request Shutdown @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive

admin request Restart @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive
   3: string restartNonce
   4: boolean restartPaused 

admin request ServiceStatsSubscribe @rights(Admin.RIGHTS_CLUSTER_READ)
   1: int accountId
   2: string authToken @sensitive
   
admin request ServiceStatsUnsubscribe
   1: int accountId
   2: string authToken @sensitive

admin request ServiceDetails @rights(Admin.RIGHTS_CLUSTER_READ)
   1: int accountId
   2: string authToken @sensitive
   
admin response ServiceDetails
   1: string iconURL
   3: string metadata
   2: ServiceCommand[] commands

admin request ServiceLogs @rights(Admin.RIGHTS_CLUSTER_READ)
   1: int accountId
   2: string authToken @sensitive
   3: long logId
   4: byte level
   5: int maxItems

admin response ServiceLogs
   1: long lastLogId 
   2: ServiceLogEntry<list> items
   
   error NOT_CONFIGURED

public struct StatPair 
   1: int id
   2: int count

public struct RequestStat
   1: string name // name of the request
   2: long count  // number of invocations
   3: long time   // cumulative time spent in microseconds 
   4: StatPair[] entities // top callers
   5: StatPair[] errors // top errors
   6: int[] timeline // histogram of calls
 
admin request ServiceRequestStats @rights(Admin.RIGHTS_CLUSTER_READ)
   1: int accountId
   2: string authToken @sensitive
   3: string domain // null is default RPC domain
   4: int limit
   5: long minTime   
   6: RequestStatsSort sortBy
   
   enum int RequestStatsSort.COUNT          = 1
   enum int RequestStatsSort.TOTAL_TIME     = 2
   enum int RequestStatsSort.AVERAGE_TIME   = 3
   enum int RequestStatsSort.ERRORS         = 4
    
admin response ServiceRequestStats 
   1: RequestStat<list> requests
   2: long minTime   // last timestamp in stats buffer
   3: string[] domains // list of other event domains service has stats for
   4: int[] timeline // histogram of calls
   5: long curTime   // current server time when stats collected
      
// returns static information for the host
admin request HostInfo @rights(Admin.RIGHTS_CLUSTER_READ)
   1: int accountId
   2: string authToken @sensitive

admin response HostInfo
   1: string hostname
   2: byte numCores
   3: string meta    // optional json meta data (can contain os stuff, aws info, etc...)
   
// fetches current snapshot of host metrics
admin request HostStats @rights(Admin.RIGHTS_CLUSTER_READ)
   1: int accountId
   2: string authToken @sensitive
   
admin response HostStats   
   1: double load    // system load average
   2: long disk      // free disks space on working dir, in bytes


admin request ServiceErrorLogs @rights(Admin.RIGHTS_CLUSTER_READ)
   1: int accountId
   2: string authToken @sensitive
   
admin response ServiceErrorLogs
   1: ServiceLogEntry<list> errors

   error NOT_CONFIGURED
   
admin request ResetServiceErrorLogs @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive

admin request SetCommsLogLevel @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive 
	3: string level

   
admin request Debug @rights(Admin.RIGHTS_CLUSTER_WRITE)
   1: int accountId
   2: string authToken @sensitive
   
   
public request WebAPI
   1: string route               // route name
   2: string headers @sensitive  // json string
   3: string params  @sensitive  // json string
   4: string body    @sensitive  // json string
   5: string uri
 
public response WebAPI
   1: string json @sensitive
   2: string redirect

internal request DirectConnection
   1: string token @sensitive
   2: int entityId

internal request GetHost
   1: int entityId
   2: string qualifier

internal response GetHost
   1: int hostId

internal response DirectConnection
   1: ServerAddress address
   2: string token @sensitive
   
public request ValidateConnection
   1: int entityId
   2: string token @sensitive

public response ValidateConnection
   1: string token @sensitive
   
public request Dummy // dummy request for RPC load testing
 
################################# MESSAGES #################################

internal message ServiceStats.ServiceStats
   1: int entityId
   2: int rps        // the requests per second serviced
   3: int mps        // messages sent per second
   4: long latency   // average time to process each request
   5: long counter   // service-specific counter value
   6: byte memory    // 0..100 the percentage of memory in use
   7: int threads    // number of active threads
    
################################# STRUCTURES #################################

internal struct WebRoute
   1: string path
   2: int structId
   3: int contractId
   4: int subContractId

internal struct TypeDescriptor
   1: byte type
   2: int contractId
   3: int structId
   const byte T_BOOLEAN  = 1
   const byte T_BYTE     = 2
   const byte T_INT      = 3
   const byte T_LONG     = 4
   const byte T_DOUBLE   = 5
   const byte T_STRING   = 6
   const byte T_STRUCT   = 7
   const byte T_BOOLEAN_LIST  = 8
   const byte T_BYTE_LIST     = 9
   const byte T_INT_LIST      = 10
   const byte T_LONG_LIST     = 11
   const byte T_DOUBLE_LIST   = 12
   const byte T_STRING_LIST   = 13
   const byte T_STRUCT_LIST   = 14
   
internal struct ContractDescription
   1: int contractId
   2: int version
   3: StructDescription<list> structs
   4: WebRoute[] routes
   5: int subContractId
   
internal struct StructDescription
   1: TypeDescriptor[] types
   2: string[] tagWebNames
   3: string name
   
internal struct ServiceLogEntry
   1: string msg
   2: byte level 
   3: long timestamp
   4: string thread
   5: string logger
   6: string contextId
   
   const byte LEVEL_ALL     = 0
   const byte LEVEL_TRACE   = 10
   const byte LEVEL_DEBUG   = 20
   const byte LEVEL_INFO    = 30
   const byte LEVEL_WARN    = 40
   const byte LEVEL_ERROR   = 50
   const byte LEVEL_OFF     = 100
