java package io.tetrapod.protocol.core
java outdir "../src"
javascript out "../rsc/protocol/tetrapod.js"

// The core tetrapod service
service Tetrapod @version(1) @id(1)

error HOSTNAME_MISMATCH

################################# STRUCTURES #################################

public struct Entity
   1: int entityId  
   2: int parentId  
   3: long reclaimToken  
   4: string host
   5: int status
   6: byte type
   7: string name
   8: int build  
   9: int version
  10: int contractId  

################################# REQUESTS #################################

public request Register
   1: int build   
   2: string token
   3: int contractId
   4: string name
   5: int status
      
public response Register 
   1: int entityId
   2: int parentId
   3: string token
   
public request ClusterJoin
   1: int entityId
   2: string host
   3: int servicePort
   4: int clusterPort
   
public response ClusterJoin
   1: int entityId
   
public request Unregister
   1: int entityId

internal request Publish 
   error NOT_READY
   error NOT_PARENT 

internal response Publish 
   1: int topicId
    
internal request RegistrySubscribe
internal request RegistryUnsubscribe
internal request ServicesSubscribe
internal request ServicesUnsubscribe

internal request ServiceStatusUpdate
   1: int status

# perhaps this should be merged into a new RegisterService   
internal request AddServiceInformation
   1: WebRoute[] routes
   2: StructDescription<list> structs // structs that could possibly be used in end user comms
   
internal request LogRegistryStats 

public request AdminLogin
   1: string email
   2: string password 

public response AdminLogin
   2: string token 
   
public request AdminAuthorize
   1: string token 
   
public request KeepAlive

internal request SetWebRoot
   1: string logicalName
   2: string webRootFolder
   3: string hostname 

################################# MESSAGES #################################

// a special message to avoid race conditions on the Register response
public message Entity 
   1: int entityId
   
// notification of an existing tetrapod cluster member    
internal message ClusterMember
   1: int entityId
   2: string host
   3: int servicePort
   4: int clusterPort
    
##### Registry Topic Messages ##### 

internal message Registry.EntityRegistered
	1: Entity entity 
	 
internal message Registry.EntityUnregistered
	1: int entityId;
	
internal message Registry.EntityUpdated
	1: int entityId;
	2: int status;	 
	
internal message Registry.TopicPublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicUnpublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicSubscribed
   1: int ownerId
   2: int topicId
   3: int entityId

internal message Registry.TopicUnsubscribed
   1: int ownerId
   2: int topicId
   3: int entityId
   
internal message Registry.EntityListComplete

##### Services Topic Messages ##### 

internal message Services.ServiceAdded
	1: Entity entity 
	 
internal message Services.ServiceRemoved
	1: int entityId;
	
internal message Services.ServiceUpdated
	1: int entityId;
	2: int status;

##### ServiceStats Topic Messages ##### 

internal message ServiceStats.ServiceStats
   1: int entityId;
   2: int rps;
   3: int mps;
   4: long latency;  
   5: long counter;