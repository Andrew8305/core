java package io.tetrapod.protocol.core
java outdir "../src"
javascript out "../rsc/protocol/tetrapod.js"

// The core tetrapod service
service Tetrapod @version(1) @id(1)

error HOSTNAME_MISMATCH
error INVALID_CREDENTIALS

################################# STRUCTURES #################################

public struct Entity
   1: int entityId  
   2: int parentId  
   3: long reclaimToken  
   4: string host
   5: int status
   6: byte type
   7: string name
   8: int build  
   9: int version
  10: int contractId  
  
################################# REQUESTS #################################

public request Register
   1: int build
   2: string token
   3: int contractId
   4: string name
   5: int status
   6: string host

public response Register 
   1: int entityId
   2: int parentId
   3: string token
   
public request ClusterJoin
   1: string host
   2: int servicePort
   3: int clusterPort
   
public response ClusterJoin
   1: int peerId   // our new peerId 
   2: int entityId // of the host we are talking to
   
public request Unregister
   1: int entityId

internal request Publish 
   1: int numTopics
   error NOT_READY
   error NOT_PARENT 

internal response Publish 
   1: int[] topicIds
    
internal request RegistrySubscribe
internal request RegistryUnsubscribe
internal request ServicesSubscribe
internal request ServicesUnsubscribe

internal request ServiceStatusUpdate
   1: int status

# perhaps this should be merged into a new RegisterService   
internal request AddServiceInformation
   1: WebRoute[] routes
   2: StructDescription<list> structs // structs that could possibly be used in end user comms
   
internal request LogRegistryStats 

public request AdminLogin
   1: string email @sensitive
   2: string password @sensitive
   
   error INVALID_ACCOUNT         

public response AdminLogin
   2: string token @sensitive
   
public request AdminAuthorize
   1: string token @sensitive

public request AdminCreate
   1: string token @sensitive
   2: string email @sensitive
   3: string password @sensitive
   
public request AdminDelete
   1: string token @sensitive
   2: int accountId;
   
public request AdminChangePassword
   1: string token @sensitive
   2: string oldPassword @sensitive
   3: string newPassword @sensitive
   
public request AdminChangeRights
   1: string token @sensitive
   2: int accountId
   3: long rights
   
public struct Admin
   1: int accountId
   2: string email @sensitive
   3: string hash @sensitive
   4: long rights
   5: long[] loginAttempts

   const int MAX_LOGIN_ATTEMPTS    = 5
   
   const int RIGHTS_CLUSTER_READ   = 1
   const int RIGHTS_CLUSTER_WRITE  = 2
   const int RIGHTS_USER_READ      = 4
   const int RIGHTS_USER_WRITE     = 8
   
public request KeepAlive

internal request AddWebFile
   1: string path
   2: string webRootName
   3: byte[] contents
   4: boolean clearBeforAdding 

private request SendWebRoot
   1: string webRootName
    
internal request SetAlternateId
   1: int entityId
   2: int alternateId
   
internal request GetSubscriberCount
   1: int topicId
   
internal response GetSubscriberCount
   1: int count

internal request GetEntityInfo
   1: int entityId

   error UNKNOWN_ENTITY_ID

internal response GetEntityInfo
   1: int build
   2: string name
   3: string host

################################# MESSAGES #################################

// a special message to avoid race conditions on the Register response
public message Entity 
   1: int entityId
   
// notification of an existing tetrapod cluster member    
internal message ClusterMember
   1: int entityId
   2: string host
   3: int servicePort
   4: int clusterPort
    
##### Registry Topic Messages ##### 

internal message Registry.EntityRegistered
	1: Entity entity 
	 
internal message Registry.EntityUnregistered
	1: int entityId;
	
internal message Registry.EntityUpdated
	1: int entityId;
	2: int status;	 
	
internal message Registry.TopicPublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicUnpublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicSubscribed
   1: int ownerId
   2: int topicId
   3: int entityId
   4: boolean once

internal message Registry.TopicUnsubscribed
   1: int ownerId
   2: int topicId
   3: int entityId
   
internal message Registry.EntityListComplete

##### Building #############

admin request GetServiceBuildInfo
   1: int accountId
   2: string authToken @sensitive
   
admin response  GetServiceBuildInfo
   1: BuildInfo<list> services
   
// An error in any one of the build commands stops processing the remaining ones
admin request ExecuteBuildCommand
   1: int accountId
   2: string authToken @sensitive
   3: BuildCommand<list> commands

// Sent every 10s or so for display in the UI while it's running
admin message BuildCommandProgress
   1: string output
   2: boolean isDone

admin struct BuildInfo
   1: string serviceName
   2: boolean canBuild
   3: boolean canDeploy
   4: boolean canLaunch
   5: int currentBuild
   6: int[] knownBuilds

admin struct BuildCommand
   1: string serviceName
   2: int build
   3: int command
   
   const int BUILD   = 1
   const int DEPLOY  = 2
   const int LAUNCH  = 3
   const int FULL_CYCLE = 4
   const int LAUNCH_PAUSED  = 5
   
   const int DEPLOY_LATEST   = -1
   const int LAUNCH_DEPLOYED = -1

##### Services Topic Messages ##### 

internal message Services.ServiceAdded
	1: Entity entity 
	 
internal message Services.ServiceRemoved
	1: int entityId
	
internal message Services.ServiceUpdated
	1: int entityId
	2: int status
	
## 3rd party auth add-ons

internal request VerifyEntityToken
   1: int entityId
   2: string token
     
     