#!/bin/sh

main() {
   set -e
   set -x

   if [ $# -lt 2 ]
   then
      echo "deploy {current | BUILD_NUM} {all | SERVICE_1 SERVICE_2 ...}"
      return 0
   fi

   getPropertiesValue build.dir
   BUILD_DIR=$PROP_VALUE

   getPropertiesValue cluster.dir   
   CLUSTER_DIR=$PROP_VALUE

   getBuildNumber $1
   shift

   IN_DIR=$BUILD_DIR/$BUILD_NUM
   LOG=$CLUSTER_DIR/deploylogs/deploy.`date +"%Y%m%d%H%M%S"`.log

   mkdir -p $CLUSTER_DIR/deploylogs

   echo "Starting deployment of build $BUILD_NUM" | tee $LOG

   if [ "$1" == "all" ]
   then
      deployAll
   else
      deployList $@
   fi

   echo "Deploy successful!" | tee $LOG
}

deployAll() {
   for f in $IN_DIR/*.zip
   do
      deployFile $f
   done
}

deployList() {
   local service=""
   for service in "$@"
   do
      DONE_DEPLOY=false
      deployFile $BUILD_DIR/$BUILD_NUM/tetrapod-$service-0.0.1-SNAPSHOT-distrib.zip
      deployFile $BUILD_DIR/$BUILD_NUM/web-$service-0.0.1-SNAPSHOT-distrib.zip
      if [ $DONE_DEPLOY = "false" ]
      then
         echo "unknown service: $service" | tee -a $LOG
         return 0
      fi
   done
}

deployFile() {
   local file=$1
   local service=`basename $file | cut -d - -f 2`
   if [ -e $file ]
   then
      local outdir=$CLUSTER_DIR/$service/$BUILD_NUM
      echo "Deploying service $service to $outdir" | tee -a $LOG
      DONE_DEPLOY=true
      if [ -e $outdir ]
      then
         echo "$outdir exists, skipping deployment" | tee -a $LOG
      else
         mkdir -p $outdir
         unzip -q $file -d $outdir >> $LOG 2>&1
         if [ -e $outdir/scripts ]
         then
            chmod -R a+x $outdir/scripts
            echo "Running postDeploy for $service" | tee -a $LOG
            echo $BUILD_NUM > $outdir/build_number.txt
            $outdir/scripts/postDeploy $outdir $BUILD_NUM >> $LOG 2>&1
            ln -s $CLUSTER_DIR/cluster.properties $outdir/cluster.properties
         fi
      fi
      local latest=$CLUSTER_DIR/$service/current
      rm -f $latest
      ln -s $outdir $latest
   fi
}

getBuildNumber() {
   local build=$1
   local file=$BUILD_DIR/build.number

   if [ "$build" == "current" ]
   then
      BUILD_NUM=`cat $file`
   else
      BUILD_NUM=$build
   fi
}

getPropertiesValue() {
   local prop=$1
   local myDir=$( cd "$( dirname "$0" )" && pwd )

   PROP_VALUE=`grep $prop $myDir/cluster.properties | cut -d= -f2-`
}

main $@
