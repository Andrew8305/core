java package io.tetrapod.protocol.identity
java outdir "../src"
javascript out "../webContent/protocol/tetrapod.js"

service Identity @version(1) @id(4) 

public request Login
   1: Identity ident
   error UNKNOWN_USERNAME, VERIFICATION_FAILURE
   
public response Login
   1: int accountId      
   2: string authToken  

protected request Logout 
   1: int accountId
   2: string authToken
   
public request LoginWithToken
   1: string authToken
   2: int tokenType
   3: int accountId // only required for AUTH_TOKEN_USER logins

public response LoginWithToken
   1: int accountId
   2: string authToken
   3: boolean isNewUser
   4: int[] decodedAppValues

// Modifies the verification part of an identity.  Not every identity 
// can do this.
protected request ModifyIdentity   
   1: int accountId
   2: string authToken
   3: Identity oldValue
   4: Identity updatedValue
   5: string username
   error UNMODIFIABLE_IDENTITY

public request Create   
   1: string username  
   2: Identity identity
   error IDENTITY_TAKEN, INVALID_INPUT
   
public response Create  
   1: int accountId
   2: string authToken

// Link always attempts to add the identity to the current accountId   
protected request Link
   1: int accountId
   2: string authToken
   3: boolean overrideConflicts  // if false, a conflicting link will not succeed
   4: Identity linkedIdentity    // identity to add
   error VERIFICATION_ERROR

// If there is a conflict the user has three choices the client has to walk them
// through:<ul>  
//   <li> forget about linking [eg. cancel]
//   <li> force the link to this account [eg. re-send Link with overrideConflicts = true]
//   <li> make the other account the main account, by:<ul>
//         <li> Logout
//         <li> Login with identity used in Link (getting your conflict id)
//         <li> Link with identity used to originally login with overrideConflicts = true
//    </ul></ul>
//  OR just tell them to contact support with the two account ids.
protected response Link
   1: boolean conflicts          // true if there was a conflict, false means success            
   2: int conflictId             // accountId of the conflicting account
   3: string conflictName        
   4: int conflictNumLogins      
   5: long conflictLastLogin     
   6: long thisLastLogin
   7: int thisNumLogins
   
protected request Info
   1: int myAccountId  @authId
   2: string authToken
   3: int infoAccountId
   
protected response Info
   1: int accountId
   2: string username 
   3: int properties
   4: string email
   
admin request UpdateProperties
   1: int accountId
   2: int properties // new properties values
   3: int mask       // which properties to update
   4: string authToken

// Adds a user with the given identity, or returns the user if it already
// exists.  The verify portion of the identity is ignored. A newly created
// user will start with PROPS_NO_PASSWORD set. 
internal request AddUnverifiedUser
   1: Identity identity
   2: string username

internal response AddUnverifiedUser
   1: int accountId
   2: string username // if the user existed this is potentially different from the passed in username
   3: boolean isNewUser

internal request GetAuthSecret
internal response GetAuthSecret
   1: byte[] secret

public struct Identity
   1: int type
   2: string publicPart    // eg: your email address
   3: string verifyPart    // eg: your password (or password hash if stored internally)
   
   const int IDENTITY_EMAIL      = 1
   const int IDENTITY_DEVICE     = 2
   const int IDENTITY_FACEBOOK   = 3
   const int IDENTITY_TWITTER    = 4
   const int IDENTITY_OAUTH      = 5
   
   const int AUTH_TOKEN_USER     = 1 // timeout, props, accountId, entityId
   const int AUTH_TOKEN_APP_1    = 2 // timeout, appValue, accountid
   const int AUTH_TOKEN_APP_2    = 3 // timeout, appValue1, appValue2, accountid
   const int AUTH_TOKEN_APP_3    = 4 // timeout, appValue1, appValue2, appValue3, accountid

private struct User
   1: string username
   2: string email
   3: int accountId
   4: int properties 
   5: int numLogins
   6: long[] loginTimes
   7: Identity[] identities
   
   const int PROPS_DEVELOPER  = 1
   const int PROPS_ADMIN_T1   = 2
   const int PROPS_ADMIN_T2   = 4 
   const int PROPS_ADMIN_T3   = 8
   const int PROPS_ADMIN_T4   = 16
   const int PROPS_BANNED_T1  = 32
   const int PROPS_BANNED_T2  = 64
   const int PROPS_BANNED_T3  = 128
   const int PROPS_NO_PASSWORD  = 256 // user has not set a password
   