java package io.tetrapod.protocol.core
java outdir "../src"
javascript out "../webContent/protocol/tetrapod.js"

// The core tetrapod service
service Tetrapod @version(1) @id(1)

struct Core
   const int   UNADDRESSED    = 0 // request is not addressed to a specific entity 
   const int   DIRECT         = 1 // request is for direct dispatch
   
   const byte  TYPE_TETRAPOD  = 1
   const byte  TYPE_SERVICE   = 2
   const byte  TYPE_ADMIN     = 3
   const byte  TYPE_CLIENT    = 4
   const byte  TYPE_ANONYMOUS = 5
    
   const int   STATUS_STARTING     = 1  # bitmask
   const int   STATUS_PAUSED       = 2
   const int   STATUS_GONE         = 4
   const int   STATUS_BUSY         = 8
   const int   STATUS_OVERLOADED   = 16
   const int   STATUS_FAILED       = 32
   const int   STATUS_STOPPING     = 64

   # assigning values to errors should only be done for core errors
   error UNKNOWN              = 1 // catch all error
   error SERVICE_UNAVAILABLE  = 2 // No service exists to which to relay the request
   error TIMEOUT              = 3 // Request timed out without returning a response
   error SERIALIZATION        = 4 // Unable to deserialize the request
   error PROTOCOL_MISMATCH    = 5 // Protocol versions are not compatible
   error UNKNOWN_REQUEST      = 6 // Service exists and received request, but doesn't know how to handle it
   error CONNECTION_CLOSED    = 7 // Request's session was disconnected
   error INVALID_RIGHTS       = 8 // Caller does not have sufficient rights to call this Request     
   error INVALID_ENTITY       = 9 // An addressed entityId was invalid
   error RIGHTS_EXPIRED       = 10 // rights token has expired, need to login again     

   const byte  ENVELOPE_HANDSHAKE      = 1 
   const byte  ENVELOPE_REQUEST        = 2
   const byte  ENVELOPE_RESPONSE       = 3
   const byte  ENVELOPE_MESSAGE        = 4
   const byte  ENVELOPE_BROADCAST      = 5
   const byte  ENVELOPE_PING           = 6
   const byte  ENVELOPE_PONG           = 7
   
################################# CORE WIRE #################################
 
public struct RequestHeader
   1: int 	requestId
   2: int 	fromId
   3: int 	toId
   4: byte 	fromType
   5: byte 	timeout
   6: int 	version
   7: int   contractId
   8: int 	structId
   
public struct ResponseHeader
   1: int requestId 
   2: int contractId
   3: int structId
   
public struct MessageHeader
   1: int fromId
   2: int topicId       
   3: int toId
   4: int contractId
   5: int structId
   
################################# STRUCTURES #################################

public struct ServerAddress 
   1: string host
   2: int port

public struct Entity
   1: int entityId  
   2: int parentId  
   3: long reclaimToken  
   4: string host
   5: int status
   6: byte type
   7: string name
   8: int build  
   9: int version
  10: int contractId  

internal struct Subscriber
   1: int entityId  
   2: int counter  

internal struct WebRoute
   1: string path
   2: int structId
   3: int contractId

internal struct TypeDescriptor
   1: byte type
   2: int contractId
   3: int structId
   const byte T_BOOLEAN  = 1
   const byte T_BYTE     = 2
   const byte T_INT      = 3
   const byte T_LONG     = 4
   const byte T_DOUBLE   = 5
   const byte T_STRING   = 6
   const byte T_STRUCT   = 7
   const byte T_BOOLEAN_LIST  = 8
   const byte T_BYTE_LIST     = 9
   const byte T_INT_LIST      = 10
   const byte T_LONG_LIST     = 11
   const byte T_DOUBLE_LIST   = 12
   const byte T_STRING_LIST   = 13
   const byte T_STRUCT_LIST   = 14
   
internal struct StructDescription
   1: TypeDescriptor[] types
   2: string[] tagWebNames

################################# REQUESTS #################################

public request KeepAlive
 
public request Register
   1: int build   
   2: string token
   3: int contractId
   4: string name
   5: int status
      
public response Register 
   1: int entityId
   2: int parentId
   3: string token
   
public request ClusterJoin
   1: int entityId
   2: string host
   3: int servicePort
   4: int clusterPort
   
public response ClusterJoin
   1: int entityId
   
public request Unregister
   1: int entityId

internal request Publish 
   error NOT_READY
   error NOT_PARENT 
   error INVALID_ENTITY

internal response Publish 
   1: int topicId
    
internal request RegistrySubscribe
internal request RegistryUnsubscribe
internal request ServicesSubscribe
internal request ServicesUnsubscribe

internal request ServiceStatusUpdate
   1: int status

# perhaps this should be merged into a new RegisterService   
internal request AddServiceInformation
   1: WebRoute[] routes
   2: StructDescription<list> structs // structs that could possibly be used in end user comms
   
internal request LogRegistryStats 

public request AdminLogin
   1: string email
   2: string password 

public response AdminLogin
   2: string token 
   
public request AdminAuthorize
   1: string token 
   

################################# MESSAGES #################################

// a special message to avoid race conditions on the Register response
public message Entity 
   1: int entityId
   
// notification of an existing tetrapod cluster member    
internal message ClusterMember
   1: int entityId
   2: string host
   3: int servicePort
   4: int clusterPort
    
##### Registry Topic Messages ##### 

internal message Registry.EntityRegistered
	1: Entity entity 
	 
internal message Registry.EntityUnregistered
	1: int entityId;
	
internal message Registry.EntityUpdated
	1: int entityId;
	2: int status;	 
	
internal message Registry.TopicPublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicUnpublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicSubscribed
   1: int ownerId
   2: int topicId
   3: int entityId

internal message Registry.TopicUnsubscribed
   1: int ownerId
   2: int topicId
   3: int entityId
   
internal message Registry.EntityListComplete

##### Services Topic Messages #####

internal message Services.ServiceAdded
	1: Entity entity 
	 
internal message Services.ServiceRemoved
	1: int entityId;
	
internal message Services.ServiceUpdated
	1: int entityId;
	2: int status;

 