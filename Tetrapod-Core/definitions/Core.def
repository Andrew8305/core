java package io.tetrapod.protocol.core
java outdir src

// The core tetrapod service
service Tetrapod version 1 [1]

struct Core
   const int   UNADDRESSED    = 0 // request is not addressed to a specific entity 
   
   const byte  TYPE_TETRAPOD  = 1
   const byte  TYPE_SERVICE   = 2
   const byte  TYPE_ADMIN     = 3
   const byte  TYPE_CLIENT    = 4
   const byte  TYPE_ANONYMOUS = 5
    
   const int   STATUS_INIT       = 1  # bitmask
   const int   STATUS_PAUSED     = 2
   const int   STATUS_GONE       = 4
   const int   STATUS_BUSY       = 8
   const int   STATUS_OVERLOADED = 16
   const int   STATUS_FAILED     = 32

   # assigning values to errors should only be done for core errors
   error UNKNOWN              = 1 // catch all error
   error SERVICE_UNAVAILABLE  = 2 // No service exists to which to relay the request
   error TIMEOUT              = 3 // Request timed out without returning a response
   error SERIALIZATION        = 4 // Unable to deserialize the request
   error PROTOCOL_MISMATCH    = 5 // Protocol versions are not compatible
   error UNKNOWN_REQUEST      = 6 // Service exists and received request, but doen't know how to handle it
   error INVALID_RIGHTS       = 7 // Caller does not have sufficient rights to call this Request
     

   const byte  ENVELOPE_HANDSHAKE  = 1
   const byte  ENVELOPE_REQUEST    = 2
   const byte  ENVELOPE_RESPONSE   = 3
   const byte  ENVELOPE_MESSAGE    = 4
   const byte  ENVELOPE_PING       = 5
   const byte  ENVELOPE_PONG       = 6
   
################################# CORE WIRE #################################
   
public struct Handshake 
   1: int wireVersion  
   2: int wireOptions 

public struct RequestHeader
   1: int 	requestId
   2: int 	fromId
   3: int 	toId
   4: byte 	fromType
   5: byte 	timeout
   6: int 	version
   7: int 	structId
   8: int   contractId
   
public struct ResponseHeader
   1: int requestId 
   2: int structId
   
public struct MessageHeader
   1: int fromId
   2: int topicId       
   3: int toId
   4: int contractId
   5: int structId

################################# STRUCTURES #################################

public struct Entity
   1: int entityId  
   2: int parentId  
   3: long reclaimToken  
   4: string host
   5: int status
   6: byte type
   7: string name
   8: int build  
   9: int version  

internal struct Subscriber
   1: int entityId  
   2: int counter  

// a flattened Topic object for serialization
internal struct FlatTopic
	1: int topicId
	2: Subscriber[] subscriber; 

################################# REQUESTS #################################

public request Register
   1: int build   
   2: string token
   3: int contractId
   4: string name
      
public response Register 
   1: int entityId
   2: int parentId
   3: string token

internal request Publish 
   error NOT_READY
   error NOT_PARENT 
   error INVALID_ENTITY   
   
internal response Publish 
   1: int topicId
    
internal request RegistrySubscribe

internal request ServiceStatusUpdate
   1: int status

################################# MESSAGES #################################
    
##### Registry Topic Messages ##### 

internal message Registry.EntityRegistered
	1: Entity entity
	2: FlatTopic[] topics;
	 
internal message Registry.EntityUnregistered
	1: int entityId;
	
internal message Registry.EntityUpdated
	1: int entityId;
	2: int status;	
	
internal message Registry.TopicPublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicUnpublished
   1: int ownerId
   2: int topicId

internal message Registry.TopicSubscribed
   1: int ownerId
   2: int topicId
   3: int entityId

internal message Registry.TopicUnsubscribed
   1: int ownerId
   2: int topicId
   3: int entityId

##### Services Topic Messages #####

internal message Services.ServiceAdded
	1: Entity entity 
	 
internal message Services.ServiceRemoved
	1: int entityId;
	
internal message Services.ServiceUpdated
	1: int entityId;
	2: int status;

internal message Services.ServiceStats
	1: int entityId;
	2: int rps;
	3: int mps;
	4: long latency;	
	5: long counter;
 